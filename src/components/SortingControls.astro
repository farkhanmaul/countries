---
// No server-side logic needed for sorting controls
---

<div class="flex items-center gap-3">
  <!-- Sort By Dropdown -->
  <div class="relative">
    <select
      id="sort-by"
      class="px-3 py-2.5 text-sm text-gray-900 dark:text-white bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:focus:ring-primary-400 dark:focus:border-primary-400 transition-colors duration-200 appearance-none cursor-pointer pr-8"
    >
      <option value="name">Sort by Name</option>
      <option value="population">Sort by Population</option>
      <option value="area">Sort by Area</option>
    </select>
    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
      <i data-lucide="chevron-down" class="w-4 h-4 text-gray-400 dark:text-gray-500"></i>
    </div>
  </div>

  <!-- Sort Order Toggle -->
  <button
    id="sort-order-toggle"
    type="button"
    class="inline-flex items-center px-3 py-2.5 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:focus:ring-primary-400 dark:focus:border-primary-400 transition-colors duration-200"
    data-order="asc"
    title="Toggle sort order"
  >
    <i data-lucide="arrow-up" id="sort-order-icon" class="w-4 h-4 transform transition-transform duration-200"></i>
  </button>
</div>

<script>
  class SortingControls {
    private sortBySelect: HTMLSelectElement | null;
    private sortOrderButton: HTMLButtonElement | null;
    private sortOrderIcon: HTMLElement | null;
    private currentOrder: 'asc' | 'desc' = 'asc';

    constructor() {
      this.sortBySelect = document.getElementById('sort-by') as HTMLSelectElement;
      this.sortOrderButton = document.getElementById('sort-order-toggle') as HTMLButtonElement;
      this.sortOrderIcon = document.getElementById('sort-order-icon') as HTMLElement;
      this.init();
    }

    private init(): void {
      // Sort by change event
      this.sortBySelect?.addEventListener('change', () => {
        this.dispatchSortEvent();
      });

      // Sort order toggle
      this.sortOrderButton?.addEventListener('click', () => {
        this.toggleSortOrder();
      });
    }

    private toggleSortOrder(): void {
      this.currentOrder = this.currentOrder === 'asc' ? 'desc' : 'asc';
      this.updateOrderButton();
      this.dispatchSortEvent();
    }

    private updateOrderButton(): void {
      if (!this.sortOrderIcon || !this.sortOrderButton) return;

      if (this.currentOrder === 'asc') {
        this.sortOrderIcon.setAttribute('data-lucide', 'arrow-up');
      } else {
        this.sortOrderIcon.setAttribute('data-lucide', 'arrow-down');
      }

      this.sortOrderButton.setAttribute('data-order', this.currentOrder);
      
      // Re-initialize icons
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }

    private dispatchSortEvent(): void {
      const event = new CustomEvent('sort-change', {
        detail: {
          sortBy: this.sortBySelect?.value || 'name',
          order: this.currentOrder
        }
      });
      document.dispatchEvent(event);
    }
  }

  // Initialize sorting controls when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SortingControls();
    
    // Initialize Lucide icons
    if (typeof lucide !== 'undefined') {
      lucide.createIcons();
    }
  });
</script>