---
// Modal component - no server-side logic needed
---

<!-- Modal Overlay -->
<div 
  id="country-modal" 
  class="fixed inset-0 z-50 hidden items-center justify-center p-4 bg-black bg-opacity-50 backdrop-blur-sm"
  aria-hidden="true"
>
  <!-- Modal Content -->
  <div 
    class="bg-white dark:bg-gray-800 rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden transform transition-all duration-300 scale-95 opacity-0"
    id="modal-content"
  >
    <!-- Modal Header -->
    <div class="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
      <h2 id="modal-title" class="text-2xl font-bold text-gray-900 dark:text-white">
        Country Details
      </h2>
      <button 
        id="close-modal" 
        type="button"
        class="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
        aria-label="Close modal"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Modal Body -->
    <div class="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
      <!-- Loading State -->
      <div id="modal-loading" class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
      </div>

      <!-- Error State -->
      <div id="modal-error" class="hidden text-center py-12">
        <div class="mx-auto w-16 h-16 text-red-500 mb-4">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Error loading country details</h3>
        <p class="text-gray-500 dark:text-gray-400">Please try again later.</p>
      </div>

      <!-- Country Details -->
      <div id="modal-details" class="hidden space-y-8">
        <!-- Header with Flag and Names -->
        <div class="flex flex-col sm:flex-row gap-6 items-center sm:items-start">
          <div class="flex-shrink-0">
            <img 
              id="modal-flag" 
              src="" 
              alt="" 
              class="w-full sm:w-48 h-32 object-cover rounded-xl shadow-lg border border-gray-200 dark:border-gray-600"
            />
          </div>
          
          <div class="flex-1 text-center sm:text-left">
            <h3 id="modal-country-name" class="text-3xl font-bold text-gray-900 dark:text-white mb-2"></h3>
            <p id="modal-official-name" class="text-lg text-gray-600 dark:text-gray-400 mb-4"></p>
            
            <!-- Quick Stats Cards -->
            <div class="grid grid-cols-2 gap-3">
              <div class="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/20 p-4 rounded-lg border border-blue-200 dark:border-blue-700">
                <div class="text-xs font-medium text-blue-600 dark:text-blue-400 uppercase tracking-wide mb-1">Population</div>
                <p id="modal-population" class="text-xl font-bold text-blue-900 dark:text-blue-100"></p>
              </div>
              <div class="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/30 dark:to-green-800/20 p-4 rounded-lg border border-green-200 dark:border-green-700">
                <div class="text-xs font-medium text-green-600 dark:text-green-400 uppercase tracking-wide mb-1">Area</div>
                <p id="modal-area" class="text-xl font-bold text-green-900 dark:text-green-100"></p>
              </div>
            </div>
          </div>
        </div>

        <!-- Information Cards Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
          <!-- Location & Geography Card -->
          <div class="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/10 rounded-xl p-6 border border-purple-200 dark:border-purple-700">
            <div class="flex items-center mb-4">
              <i data-lucide="map-pin" class="w-5 h-5 text-purple-600 dark:text-purple-400 mr-2"></i>
              <h4 class="text-lg font-semibold text-purple-900 dark:text-purple-100">Location & Geography</h4>
            </div>
            <div class="space-y-3 text-sm">
              <div class="flex justify-between items-center">
                <span class="text-purple-700 dark:text-purple-300">Capital:</span>
                <span id="modal-capital" class="font-medium text-purple-900 dark:text-purple-100 text-right"></span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-purple-700 dark:text-purple-300">Region:</span>
                <span id="modal-region" class="font-medium text-purple-900 dark:text-purple-100"></span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-purple-700 dark:text-purple-300">Subregion:</span>
                <span id="modal-subregion" class="font-medium text-purple-900 dark:text-purple-100 text-right"></span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-purple-700 dark:text-purple-300">Landlocked:</span>
                <span id="modal-landlocked" class="font-medium text-purple-900 dark:text-purple-100"></span>
              </div>
              <div class="pt-2 border-t border-purple-200 dark:border-purple-600">
                <span class="text-purple-700 dark:text-purple-300 block mb-2">Timezones:</span>
                <div id="modal-timezones" class="text-xs font-mono text-purple-800 dark:text-purple-200 space-y-1"></div>
              </div>
            </div>
          </div>

          <!-- Culture & Languages Card -->
          <div class="bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/10 rounded-xl p-6 border border-orange-200 dark:border-orange-700">
            <div class="flex items-center mb-4">
              <i data-lucide="globe-2" class="w-5 h-5 text-orange-600 dark:text-orange-400 mr-2"></i>
              <h4 class="text-lg font-semibold text-orange-900 dark:text-orange-100">Culture & Languages</h4>
            </div>
            <div class="space-y-3 text-sm">
              <div>
                <span class="text-orange-700 dark:text-orange-300 block mb-2">Languages:</span>
                <div id="modal-languages" class="space-y-1"></div>
              </div>
              <div>
                <span class="text-orange-700 dark:text-orange-300 block mb-2">Currencies:</span>
                <div id="modal-currencies" class="space-y-1"></div>
              </div>
              <div class="pt-2 border-t border-orange-200 dark:border-orange-600">
                <div class="flex justify-between items-center">
                  <span class="text-orange-700 dark:text-orange-300">Demonyms:</span>
                  <span id="modal-demonyms" class="font-medium text-orange-900 dark:text-orange-100 text-right"></span>
                </div>
                <div class="flex justify-between items-center mt-2">
                  <span class="text-orange-700 dark:text-orange-300">Start of Week:</span>
                  <span id="modal-start-of-week" class="font-medium text-orange-900 dark:text-orange-100"></span>
                </div>
              </div>
            </div>
          </div>

          <!-- Government & Codes Card -->
          <div class="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/10 rounded-xl p-6 border border-blue-200 dark:border-blue-700">
            <div class="flex items-center mb-4">
              <i data-lucide="landmark" class="w-5 h-5 text-blue-600 dark:text-blue-400 mr-2"></i>
              <h4 class="text-lg font-semibold text-blue-900 dark:text-blue-100">Government & Codes</h4>
            </div>
            <div class="space-y-3 text-sm">
              <div class="flex justify-between items-center">
                <span class="text-blue-700 dark:text-blue-300">UN Member:</span>
                <span id="modal-un-member" class="font-medium text-blue-900 dark:text-blue-100"></span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-blue-700 dark:text-blue-300">Independent:</span>
                <span id="modal-independent" class="font-medium text-blue-900 dark:text-blue-100"></span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-blue-700 dark:text-blue-300">Calling Code:</span>
                <span id="modal-calling-code" class="font-medium text-blue-900 dark:text-blue-100"></span>
              </div>
              <div class="pt-2 border-t border-blue-200 dark:border-blue-600 space-y-2">
                <div class="flex justify-between items-center">
                  <span class="text-blue-700 dark:text-blue-300">ISO Alpha-2:</span>
                  <span id="modal-alpha-2" class="font-mono font-bold text-blue-900 dark:text-blue-100 bg-blue-100 dark:bg-blue-800 px-2 py-1 rounded"></span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-blue-700 dark:text-blue-300">ISO Alpha-3:</span>
                  <span id="modal-alpha-3" class="font-mono font-bold text-blue-900 dark:text-blue-100 bg-blue-100 dark:bg-blue-800 px-2 py-1 rounded"></span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-blue-700 dark:text-blue-300">FIFA Code:</span>
                  <span id="modal-fifa" class="font-mono font-bold text-blue-900 dark:text-blue-100"></span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Additional Information Section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Transportation & Postal Card -->
          <div class="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/10 rounded-xl p-6 border border-green-200 dark:border-green-700">
            <div class="flex items-center mb-4">
              <i data-lucide="car" class="w-5 h-5 text-green-600 dark:text-green-400 mr-2"></i>
              <h4 class="text-lg font-semibold text-green-900 dark:text-green-100">Transportation & Postal</h4>
            </div>
            <div class="space-y-3 text-sm">
              <div class="flex justify-between items-center">
                <span class="text-green-700 dark:text-green-300">Driving Side:</span>
                <span id="modal-car-side" class="font-medium text-green-900 dark:text-green-100"></span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-green-700 dark:text-green-300">Car Signs:</span>
                <span id="modal-car-signs" class="font-mono font-bold text-green-900 dark:text-green-100 bg-green-100 dark:bg-green-800 px-2 py-1 rounded"></span>
              </div>
              <div class="pt-2 border-t border-green-200 dark:border-green-600">
                <span class="text-green-700 dark:text-green-300 block mb-2">Postal Code Format:</span>
                <div id="modal-postal-code" class="font-mono text-xs bg-green-100 dark:bg-green-800 p-2 rounded text-green-900 dark:text-green-100"></div>
              </div>
            </div>
          </div>

          <!-- Coat of Arms Card -->
          <div id="modal-coat-of-arms-card" class="hidden bg-gradient-to-br from-amber-50 to-amber-100 dark:from-amber-900/20 dark:to-amber-800/10 rounded-xl p-6 border border-amber-200 dark:border-amber-700">
            <div class="flex items-center mb-4">
              <i data-lucide="shield" class="w-5 h-5 text-amber-600 dark:text-amber-400 mr-2"></i>
              <h4 class="text-lg font-semibold text-amber-900 dark:text-amber-100">National Symbols</h4>
            </div>
            <div class="text-center">
              <img 
                id="modal-coat-of-arms" 
                src="" 
                alt="Coat of Arms" 
                class="w-24 h-24 object-contain mx-auto rounded-lg bg-white p-2 shadow-md"
              />
              <p class="text-xs text-amber-700 dark:text-amber-300 mt-2">National Coat of Arms</p>
            </div>
          </div>
        </div>

        <!-- Borders Section -->
        <div id="modal-borders-section" class="hidden bg-gray-50 dark:bg-gray-800/50 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
          <div class="flex items-center mb-4">
            <svg class="w-5 h-5 text-indigo-600 dark:text-indigo-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
            </svg>
            <h4 class="text-lg font-semibold text-gray-900 dark:text-white">Neighboring Countries</h4>
          </div>
          <div id="modal-borders" class="flex flex-wrap gap-2"></div>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 sm:justify-between sm:items-center pt-6 border-t border-gray-200 dark:border-gray-700">
          <button 
            id="modal-favorite-btn" 
            class="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200"
          >
            <svg class="w-4 h-4 favorite-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
            </svg>
            <span class="favorite-text">Add to Favorites</span>
          </button>

          <a 
            id="modal-maps-link" 
            href="" 
            target="_blank" 
            rel="noopener noreferrer"
            class="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 transition-colors duration-200"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
            </svg>
            View on Maps
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { isFavorite, addToFavorites, removeFromFavorites } from '../utils/favorites';

  interface CountryDetails {
    name: {
      common: string;
      official: string;
    };
    capital?: string[];
    region: string;
    subregion?: string;
    population: number;
    area: number;
    flags: {
      png: string;
      svg: string;
      alt?: string;
    };
    coatOfArms?: {
      png?: string;
      svg?: string;
    };
    languages?: { [key: string]: string };
    currencies?: { [key: string]: { name: string; symbol: string } };
    timezones: string[];
    demonyms?: { [key: string]: { f: string; m: string } };
    idd: { root?: string; suffixes?: string[] };
    unMember: boolean;
    independent?: boolean;
    landlocked?: boolean;
    borders?: string[];
    maps: { googleMaps: string; openStreetMaps: string };
    cca2: string;
    cca3: string;
    ccn3?: string;
    fifa?: string;
    car?: {
      side: string;
      signs?: string[];
    };
    postalCode?: {
      format: string;
      regex: string;
    };
    startOfWeek?: string;
  }

  class CountryModal {
    private modal: HTMLElement | null;
    private modalContent: HTMLElement | null;
    private loading: HTMLElement | null;
    private error: HTMLElement | null;
    private details: HTMLElement | null;
    private currentCountryCode: string = '';

    constructor() {
      this.modal = document.getElementById('country-modal');
      this.modalContent = document.getElementById('modal-content');
      this.loading = document.getElementById('modal-loading');
      this.error = document.getElementById('modal-error');
      this.details = document.getElementById('modal-details');

      this.init();
    }

    private init(): void {
      // Listen for country selection events
      document.addEventListener('country-selected', (e: Event) => {
        const customEvent = e as CustomEvent;
        this.openModal(customEvent.detail.countryCode);
      });

      // Close modal events
      const closeBtn = document.getElementById('close-modal');
      closeBtn?.addEventListener('click', () => this.closeModal());

      // Close on overlay click
      this.modal?.addEventListener('click', (e) => {
        if (e.target === this.modal) {
          this.closeModal();
        }
      });

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !this.modal?.classList.contains('hidden')) {
          this.closeModal();
        }
      });

      // Favorite button
      const favoriteBtn = document.getElementById('modal-favorite-btn');
      favoriteBtn?.addEventListener('click', () => {
        this.toggleFavorite();
      });
    }

    private async openModal(countryCode: string): Promise<void> {
      this.currentCountryCode = countryCode;
      
      // Show modal
      this.modal?.classList.remove('hidden');
      this.modal?.classList.add('flex');
      
      // Show loading state
      this.showLoading();

      // Animate modal appearance
      setTimeout(() => {
        if (this.modalContent) {
          this.modalContent.classList.remove('scale-95', 'opacity-0');
          this.modalContent.classList.add('scale-100', 'opacity-100');
        }
      }, 10);

      try {
        // Fetch country details
        const response = await fetch(`https://restcountries.com/v3.1/alpha/${countryCode}`);
        
        if (!response.ok) {
          throw new Error('Failed to fetch country details');
        }

        const countries: CountryDetails[] = await response.json();
        const country = countries[0];

        if (country) {
          this.displayCountryDetails(country);
        } else {
          this.showError();
        }
      } catch (error) {
        console.error('Error fetching country details:', error);
        this.showError();
      }
    }

    private closeModal(): void {
      // Animate modal disappearance
      if (this.modalContent) {
        this.modalContent.classList.remove('scale-100', 'opacity-100');
        this.modalContent.classList.add('scale-95', 'opacity-0');
      }

      // Hide modal after animation
      setTimeout(() => {
        this.modal?.classList.add('hidden');
        this.modal?.classList.remove('flex');
      }, 300);
    }

    private showLoading(): void {
      this.loading?.classList.remove('hidden');
      this.error?.classList.add('hidden');
      this.details?.classList.add('hidden');
    }

    private showError(): void {
      this.loading?.classList.add('hidden');
      this.error?.classList.remove('hidden');
      this.details?.classList.add('hidden');
    }

    private displayCountryDetails(country: CountryDetails): void {
      // Hide loading and error, show details
      this.loading?.classList.add('hidden');
      this.error?.classList.add('hidden');
      this.details?.classList.remove('hidden');

      // Update modal title
      const title = document.getElementById('modal-title');
      if (title) title.textContent = country.name.common;

      // Update flag and names
      const flag = document.getElementById('modal-flag') as HTMLImageElement;
      const countryName = document.getElementById('modal-country-name');
      const officialName = document.getElementById('modal-official-name');

      if (flag) {
        flag.src = country.flags.svg || country.flags.png;
        flag.alt = country.flags.alt || `Flag of ${country.name.common}`;
      }
      if (countryName) countryName.textContent = country.name.common;
      if (officialName) officialName.textContent = country.name.official;

      // Update stats
      this.updateElement('modal-population', country.population.toLocaleString());
      this.updateElement('modal-area', `${country.area.toLocaleString()} km²`);

      // Update location info
      this.updateElement('modal-capital', country.capital?.join(', ') || 'N/A');
      this.updateElement('modal-region', country.region);
      this.updateElement('modal-subregion', country.subregion || 'N/A');
      this.updateElement('modal-landlocked', country.landlocked ? 'Yes' : 'No');
      this.updateTimezones(country.timezones);

      // Update cultural info
      this.updateLanguages(country.languages);
      this.updateCurrencies(country.currencies);
      this.updateDemonyms(country.demonyms);
      this.updateElement('modal-start-of-week', country.startOfWeek || 'N/A');

      // Update government & codes
      this.updateCallingCode(country.idd);
      this.updateElement('modal-un-member', country.unMember ? 'Yes' : 'No');
      this.updateElement('modal-independent', country.independent ? 'Yes' : 'No');
      this.updateElement('modal-alpha-2', country.cca2 || 'N/A');
      this.updateElement('modal-alpha-3', country.cca3 || 'N/A');
      this.updateElement('modal-fifa', country.fifa || 'N/A');

      // Update transportation & postal
      this.updateCarInfo(country.car);
      this.updatePostalCode(country.postalCode);

      // Update coat of arms
      this.updateCoatOfArms(country.coatOfArms);

      // Update borders
      this.updateBorders(country.borders);

      // Update maps link
      const mapsLink = document.getElementById('modal-maps-link') as HTMLAnchorElement;
      if (mapsLink) {
        mapsLink.href = country.maps.googleMaps || country.maps.openStreetMaps;
      }

      // Update favorite button
      this.updateFavoriteButton();
    }

    private updateElement(id: string, content: string): void {
      const element = document.getElementById(id);
      if (element) element.textContent = content;
    }

    private updateTimezones(timezones: string[]): void {
      const container = document.getElementById('modal-timezones');
      if (!container) return;

      if (!timezones || timezones.length === 0) {
        container.textContent = 'N/A';
        return;
      }

      container.innerHTML = timezones.map(timezone => 
        `<div class="bg-purple-100 dark:bg-purple-800 text-purple-800 dark:text-purple-200 px-2 py-1 rounded text-xs">${timezone}</div>`
      ).join('');
    }

    private updateLanguages(languages?: { [key: string]: string }): void {
      const container = document.getElementById('modal-languages');
      if (!container) return;

      if (!languages) {
        container.textContent = 'N/A';
        return;
      }

      const langList = Object.values(languages);
      container.innerHTML = langList.map(lang => 
        `<span class="inline-block bg-orange-100 dark:bg-orange-800 text-orange-800 dark:text-orange-200 px-2 py-1 rounded text-sm mr-2 mb-1">${lang}</span>`
      ).join('');
    }

    private updateCurrencies(currencies?: { [key: string]: { name: string; symbol: string } }): void {
      const container = document.getElementById('modal-currencies');
      if (!container) return;

      if (!currencies) {
        container.textContent = 'N/A';
        return;
      }

      const currencyList = Object.values(currencies);
      container.innerHTML = currencyList.map(currency => 
        `<span class="inline-block bg-orange-100 dark:bg-orange-800 text-orange-800 dark:text-orange-200 px-2 py-1 rounded text-sm mr-2 mb-1">${currency.name} (${currency.symbol})</span>`
      ).join('');
    }

    private updateDemonyms(demonyms?: { [key: string]: { f: string; m: string } }): void {
      const element = document.getElementById('modal-demonyms');
      if (!element) return;

      if (!demonyms) {
        element.textContent = 'N/A';
        return;
      }

      const eng = demonyms.eng;
      if (eng) {
        element.textContent = `${eng.m} / ${eng.f}`;
      } else {
        element.textContent = 'N/A';
      }
    }

    private updateCallingCode(idd: { root?: string; suffixes?: string[] }): void {
      const element = document.getElementById('modal-calling-code');
      if (!element) return;

      if (idd.root && idd.suffixes && idd.suffixes.length > 0) {
        element.textContent = `${idd.root}${idd.suffixes[0]}`;
      } else {
        element.textContent = 'N/A';
      }
    }

    private updateBorders(borders?: string[]): void {
      const section = document.getElementById('modal-borders-section');
      const container = document.getElementById('modal-borders');
      
      if (!section || !container) return;

      if (!borders || borders.length === 0) {
        section.classList.add('hidden');
        return;
      }

      section.classList.remove('hidden');
      container.innerHTML = borders.map(border => 
        `<span class="inline-block bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-full text-sm border cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200">${border}</span>`
      ).join('');
    }

    private updateCarInfo(car?: { side: string; signs?: string[] }): void {
      const sideElement = document.getElementById('modal-car-side');
      const signsElement = document.getElementById('modal-car-signs');
      
      if (sideElement) {
        if (car?.side) {
          const sideText = car.side === 'right' ? 'Right-hand traffic' : 'Left-hand traffic';
          sideElement.textContent = sideText;
        } else {
          sideElement.textContent = 'N/A';
        }
      }

      if (signsElement) {
        if (car?.signs && car.signs.length > 0) {
          signsElement.textContent = car.signs.join(', ');
        } else {
          signsElement.textContent = 'N/A';
        }
      }
    }

    private updatePostalCode(postalCode?: { format: string; regex: string }): void {
      const element = document.getElementById('modal-postal-code');
      if (!element) return;

      if (postalCode?.format) {
        element.innerHTML = `
          <div class="mb-1">Format: <span class="font-bold">${postalCode.format}</span></div>
          <div class="text-xs opacity-75">Regex: ${postalCode.regex}</div>
        `;
      } else {
        element.textContent = 'No standard postal code format';
      }
    }

    private updateCoatOfArms(coatOfArms?: { png?: string; svg?: string }): void {
      const card = document.getElementById('modal-coat-of-arms-card');
      const image = document.getElementById('modal-coat-of-arms') as HTMLImageElement;
      
      if (!card || !image) return;

      if (coatOfArms?.svg || coatOfArms?.png) {
        card.classList.remove('hidden');
        image.src = coatOfArms.svg || coatOfArms.png || '';
        image.alt = 'National Coat of Arms';
      } else {
        card.classList.add('hidden');
      }
    }

    private updateFavoriteButton(): void {
      const favoriteBtn = document.getElementById('modal-favorite-btn');
      const icon = favoriteBtn?.querySelector('.favorite-icon') as SVGElement;
      const text = favoriteBtn?.querySelector('.favorite-text');

      if (!favoriteBtn || !icon || !text) return;

      if (isFavorite(this.currentCountryCode)) {
        icon.setAttribute('fill', 'currentColor');
        text.textContent = 'Remove from Favorites';
        favoriteBtn.classList.remove('text-gray-700', 'dark:text-gray-300', 'bg-gray-100', 'dark:bg-gray-700');
        favoriteBtn.classList.add('text-red-700', 'dark:text-red-300', 'bg-red-100', 'dark:bg-red-900');
      } else {
        icon.setAttribute('fill', 'none');
        text.textContent = 'Add to Favorites';
        favoriteBtn.classList.remove('text-red-700', 'dark:text-red-300', 'bg-red-100', 'dark:bg-red-900');
        favoriteBtn.classList.add('text-gray-700', 'dark:text-gray-300', 'bg-gray-100', 'dark:bg-gray-700');
      }
    }

    private toggleFavorite(): void {
      const favoriteBtn = document.getElementById('modal-favorite-btn');
      const icon = favoriteBtn?.querySelector('.favorite-icon') as SVGElement;
      const text = favoriteBtn?.querySelector('.favorite-text');

      if (!favoriteBtn || !icon || !text) return;

      if (isFavorite(this.currentCountryCode)) {
        removeFromFavorites(this.currentCountryCode);
        icon.setAttribute('fill', 'none');
        text.textContent = 'Add to Favorites';
        favoriteBtn.classList.remove('text-red-700', 'dark:text-red-300', 'bg-red-100', 'dark:bg-red-900');
        favoriteBtn.classList.add('text-gray-700', 'dark:text-gray-300', 'bg-gray-100', 'dark:bg-gray-700');
      } else {
        addToFavorites(this.currentCountryCode);
        icon.setAttribute('fill', 'currentColor');
        text.textContent = 'Remove from Favorites';
        favoriteBtn.classList.remove('text-gray-700', 'dark:text-gray-300', 'bg-gray-100', 'dark:bg-gray-700');
        favoriteBtn.classList.add('text-red-700', 'dark:text-red-300', 'bg-red-100', 'dark:bg-red-900');
      }
    }
  }

  // Initialize modal when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CountryModal();
  });
</script>