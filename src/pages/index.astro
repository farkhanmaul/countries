---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import SearchBar from '../components/SearchBar.astro';
import RegionFilter from '../components/RegionFilter.astro';
import SortingControls from '../components/SortingControls.astro';
import CountryGrid from '../components/CountryGrid.astro';
import CountryModal from '../components/CountryModal.astro';
import { fetchAllCountries } from '../utils/api';

// Don't fetch countries initially - let user trigger the search
let countries = [];
let error = null;
---

<Layout title="Country Explorer - Discover Countries Around the World">
  <Navbar />
  
  <main class="flex-1">
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-primary-50 to-accent-50 dark:from-primary-900/20 dark:to-accent-900/20 py-8">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <!-- Search Section -->
          <div class="max-w-2xl mx-auto">
            <SearchBar />
          </div>
        </div>
      </div>
    </section>

    <!-- Filters and Controls -->
    <section class="border-b border-gray-200 dark:border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Filter Toggle Button -->
        <div class="py-3 flex items-center justify-center">
          <button 
            id="filter-toggle-btn"
            class="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-all duration-200"
          >
            <i data-lucide="sliders-horizontal" class="w-4 h-4"></i>
            <span>Filters & Sort</span>
            <i data-lucide="chevron-down" id="filter-chevron" class="w-4 h-4 transition-transform duration-200"></i>
          </button>
        </div>
        
        <!-- Collapsible Filter Controls -->
        <div id="filter-controls" class="hidden pb-4">
          <div class="flex flex-wrap items-center justify-center gap-4 lg:gap-6 pt-2 border-t border-gray-100 dark:border-gray-700">
            <!-- Region Filter -->
            <div class="min-w-0 flex-shrink-0">
              <RegionFilter />
            </div>
            
            <!-- Sorting Controls -->
            <div class="min-w-0 flex-shrink-0">
              <SortingControls />
            </div>
            
            <!-- View Mode Toggle -->
            <div class="min-w-0 flex-shrink-0">
              <div class="flex rounded-lg border border-primary-200 dark:border-primary-700 p-1 bg-primary-50 dark:bg-primary-900/20">
                <button 
                  id="view-grid" 
                  class="view-mode-btn active flex items-center justify-center px-3 py-2 rounded-md text-sm font-medium bg-white dark:bg-primary-800 text-primary-600 dark:text-primary-300 shadow-sm"
                >
                  <i data-lucide="grid-3x3" class="w-4 h-4 mr-2"></i>
                  Grid
                </button>
                <button 
                  id="view-list" 
                  class="view-mode-btn flex items-center justify-center px-3 py-2 rounded-md text-sm font-medium text-primary-500 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-200"
                >
                  <i data-lucide="list" class="w-4 h-4 mr-2"></i>
                  List
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Countries Section -->
    <section class="py-4">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Welcome Message -->
        <div id="welcome-message" class="text-center py-16">
          <div class="mx-auto w-20 h-20 text-primary-500 dark:text-primary-400 mb-6">
            <i data-lucide="globe" class="w-full h-full"></i>
          </div>
          <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Welcome to Country Explorer!</h3>
          <p class="text-gray-600 dark:text-gray-400 mb-6 max-w-xl mx-auto">
            Start exploring by searching for countries, filtering by region, or browse all available data.
          </p>
          <button 
            id="load-all-countries" 
            class="px-6 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-lg hover:from-primary-700 hover:to-accent-700 transition-all duration-200 font-medium shadow-elegant"
          >
            <i data-lucide="globe" class="w-4 h-4 mr-2 inline"></i>
            Explore All Countries
          </button>
        </div>

        <!-- API Status Banner (hidden initially) -->
        <div id="api-status-banner" class="hidden mb-6 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-yellow-600 dark:text-yellow-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            <div>
              <p class="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                API Temporarily Unavailable
              </p>
              <p class="text-sm text-yellow-700 dark:text-yellow-300">
                Showing sample countries. Full data will load when API is restored.
              </p>
            </div>
          </div>
        </div>

        <!-- Results Info (hidden initially) -->
        <div id="results-info" class="hidden mb-6">
          <p class="text-gray-600 dark:text-gray-400">
            Showing <strong id="results-count">0</strong> countries
            <span id="sample-data-indicator" class="hidden text-yellow-600 dark:text-yellow-400"> (sample data)</span>
          </p>
        </div>

        <!-- Countries Grid (hidden initially) -->
        <div id="countries-container" class="hidden">
          <!-- Dynamic countries grid will be inserted here -->
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="countries-grid">
            <!-- Countries will be dynamically added here -->
          </div>
        </div>

        <!-- Loading State -->
        <div id="loading-state" class="hidden text-center py-20">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
          <p class="text-gray-600 dark:text-gray-400">Loading countries...</p>
        </div>

        <!-- Error State -->
        <div id="error-state" class="hidden text-center py-20">
          <div class="mx-auto w-24 h-24 text-red-500 mb-4">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Failed to load countries</h3>
          <p id="error-message" class="text-gray-500 dark:text-gray-400 mb-4"></p>
          <button 
            id="retry-button"
            class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors duration-200"
          >
            Try Again
          </button>
        </div>
      </div>
    </section>
  </main>

  <!-- Footer -->
  <footer class="bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div class="flex flex-col sm:flex-row justify-between items-center gap-4 text-sm">
        <!-- Credits -->
        <div class="flex items-center gap-4 text-gray-600 dark:text-gray-400">
          <span>Created by</span>
          <a href="https://github.com/farkhanmaul" target="_blank" rel="noopener noreferrer" class="text-primary-600 dark:text-primary-400 hover:underline font-medium">
            Farkhan Maul
          </a>
          <span>•</span>
          <span>Built with</span>
          <a href="https://claude.ai/code" target="_blank" rel="noopener noreferrer" class="text-primary-600 dark:text-primary-400 hover:underline">
            Claude Code
          </a>
        </div>
        
        <!-- Links -->
        <div class="flex items-center gap-4 text-gray-500 dark:text-gray-400">
          <a href="https://restcountries.com" target="_blank" rel="noopener noreferrer" class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
            API
          </a>
          <span>•</span>
          <a href="https://github.com/farkhanmaul/countries" target="_blank" rel="noopener noreferrer" class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
            GitHub
          </a>
        </div>
      </div>
    </div>
  </footer>

  <!-- Country Modal -->
  <CountryModal />

  <!-- Quiz Modal -->
  <div id="quiz-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-white dark:bg-gray-800 rounded-lg max-w-lg w-full p-6">
      <!-- Quiz Header -->
      <div class="flex items-center justify-between mb-6">
        <div class="flex items-center gap-2">
          <i data-lucide="brain" class="w-5 h-5 text-primary-500"></i>
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Country Quiz</h3>
        </div>
        <button id="quiz-close" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors">
          <i data-lucide="x" class="w-5 h-5"></i>
        </button>
      </div>

      <!-- Quiz Content -->
      <div id="quiz-content">
        <!-- Quiz Start Screen -->
        <div id="quiz-start" class="text-center">
          <div class="mb-6">
            <div class="w-16 h-16 bg-gradient-to-br from-primary-500 to-accent-500 rounded-full flex items-center justify-center mx-auto mb-4">
              <i data-lucide="flag" class="w-8 h-8 text-white"></i>
            </div>
            <h4 class="text-xl font-bold text-gray-900 dark:text-white mb-2">Test Your Geography Knowledge!</h4>
            <p class="text-gray-600 dark:text-gray-400">Can you identify countries by their flags and match capitals?</p>
          </div>
          
          <div class="space-y-3">
            <button id="quiz-start-flags" class="w-full px-4 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors font-medium">
              <i data-lucide="flag" class="w-4 h-4 mr-2 inline"></i>
              Guess the Country by Flag
            </button>
            <button id="quiz-start-capitals" class="w-full px-4 py-3 bg-accent-600 text-white rounded-lg hover:bg-accent-700 transition-colors font-medium">
              <i data-lucide="landmark" class="w-4 h-4 mr-2 inline"></i>
              Guess the Capital City
            </button>
          </div>
        </div>

        <!-- Quiz Game Screen -->
        <div id="quiz-game" class="hidden">
          <!-- Quiz Progress -->
          <div class="mb-6">
            <div class="flex justify-between items-center mb-2">
              <span class="text-sm font-medium text-gray-600 dark:text-gray-400">
                Question <span id="quiz-current">1</span> of <span id="quiz-total">5</span>
              </span>
              <span class="text-sm font-medium text-primary-600 dark:text-primary-400">
                Score: <span id="quiz-score">0</span>
              </span>
            </div>
            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
              <div id="quiz-progress" class="bg-gradient-to-r from-primary-500 to-accent-500 h-2 rounded-full transition-all duration-300" style="width: 20%"></div>
            </div>
          </div>

          <!-- Quiz Question -->
          <div class="text-center mb-6">
            <div id="quiz-question-flag" class="hidden mb-4">
              <img id="quiz-flag-img" src="" alt="Country flag" class="w-32 h-20 object-cover mx-auto rounded-lg shadow-md border-2 border-gray-200 dark:border-gray-600">
              <p class="text-lg font-semibold text-gray-900 dark:text-white mt-4">Which country does this flag belong to?</p>
            </div>
            <div id="quiz-question-capital" class="hidden">
              <h4 class="text-2xl font-bold text-primary-600 dark:text-primary-400 mb-2" id="quiz-country-name"></h4>
              <p class="text-lg font-semibold text-gray-900 dark:text-white">What is the capital city?</p>
            </div>
          </div>

          <!-- Quiz Options -->
          <div class="space-y-3" id="quiz-options">
            <!-- Options will be generated dynamically -->
          </div>
        </div>

        <!-- Quiz Results Screen -->
        <div id="quiz-results" class="hidden text-center">
          <div class="mb-6">
            <div class="w-20 h-20 bg-gradient-to-br from-success-500 to-success-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <i data-lucide="trophy" class="w-10 h-10 text-white"></i>
            </div>
            <h4 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">Quiz Complete!</h4>
            <p class="text-lg">
              <span class="text-2xl font-bold text-primary-600 dark:text-primary-400" id="final-score">0</span>
              <span class="text-gray-600 dark:text-gray-400">out of</span>
              <span class="text-2xl font-bold text-gray-900 dark:text-white" id="final-total">5</span>
            </p>
            <p class="text-gray-600 dark:text-gray-400 mt-2" id="score-message"></p>
          </div>
          
          <div class="space-y-3">
            <button id="quiz-restart" class="w-full px-4 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors font-medium">
              <i data-lucide="refresh-cw" class="w-4 h-4 mr-2 inline"></i>
              Play Again
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<!-- Main Application Script -->
<script>
  import { 
    fetchAllCountries, 
    fetchCountryByName, 
    fetchCountriesByRegion, 
    fetchCountriesByCurrency, 
    fetchCountriesByLanguage, 
    fetchCountriesByCapital, 
    fetchCountriesByDemonym,
    fetchIndependentCountries 
  } from '../utils/api';
  import type { Country, FilterOptions } from '../types/country';

  class CountryExplorer {
    private allCountries: Country[] = [];
    private filteredCountries: Country[] = [];
    private currentFilters: FilterOptions = {
      search: '',
      region: '',
      sortBy: 'name',
      sortOrder: 'asc'
    };
    private currentViewMode: 'grid' | 'list' = 'grid';
    private isLoading: boolean = false;

    constructor() {
      this.init();
    }

    private async init(): Promise<void> {
      this.setupEventListeners();
    }

    private setupEventListeners(): void {
      // Load all countries button
      const loadAllBtn = document.getElementById('load-all-countries');
      loadAllBtn?.addEventListener('click', () => {
        this.loadAllCountries();
      });

      // Search events
      document.addEventListener('country-search', (e: Event) => {
        const customEvent = e as CustomEvent;
        console.log('Search event received:', customEvent.detail);
        this.handleSearch(customEvent.detail.query, customEvent.detail.searchType || 'name');
      });

      // Region filter events
      document.addEventListener('region-filter', (e: Event) => {
        const customEvent = e as CustomEvent;
        this.currentFilters.region = customEvent.detail.region;
        this.applyFilters();
      });

      // Sort events
      document.addEventListener('sort-change', (e: Event) => {
        const customEvent = e as CustomEvent;
        this.currentFilters.sortBy = customEvent.detail.sortBy;
        this.currentFilters.sortOrder = customEvent.detail.order;
        this.applyFilters();
      });

      // View mode events
      document.addEventListener('view-change', (e: Event) => {
        const customEvent = e as CustomEvent;
        this.currentViewMode = customEvent.detail.view;
        this.renderCountries();
      });

      // Filter toggle
      const filterToggleBtn = document.getElementById('filter-toggle-btn');
      filterToggleBtn?.addEventListener('click', () => {
        this.toggleFilters();
      });

      // View mode buttons
      const viewGridBtn = document.getElementById('view-grid');
      const viewListBtn = document.getElementById('view-list');
      
      viewGridBtn?.addEventListener('click', () => {
        this.handleViewModeChange('grid');
      });
      
      viewListBtn?.addEventListener('click', () => {
        this.handleViewModeChange('list');
      });

      // Retry button
      const retryBtn = document.getElementById('retry-button');
      retryBtn?.addEventListener('click', () => {
        this.loadAllCountries();
      });

      // Quiz events
      document.addEventListener('quiz-start', () => {
        this.openQuiz();
      });

      // Quiz modal events
      const quizClose = document.getElementById('quiz-close');
      const quizStartFlags = document.getElementById('quiz-start-flags');
      const quizStartCapitals = document.getElementById('quiz-start-capitals');
      const quizRestart = document.getElementById('quiz-restart');

      quizClose?.addEventListener('click', () => {
        this.closeQuiz();
      });

      quizStartFlags?.addEventListener('click', () => {
        this.startQuiz('flags');
      });

      quizStartCapitals?.addEventListener('click', () => {
        this.startQuiz('capitals');
      });

      quizRestart?.addEventListener('click', () => {
        this.resetQuiz();
      });
    }

    private toggleFilters(): void {
      const filterControls = document.getElementById('filter-controls');
      const filterChevron = document.getElementById('filter-chevron');
      
      if (!filterControls || !filterChevron) return;

      const isHidden = filterControls.classList.contains('hidden');
      
      if (isHidden) {
        filterControls.classList.remove('hidden');
        filterChevron.style.transform = 'rotate(180deg)';
      } else {
        filterControls.classList.add('hidden');
        filterChevron.style.transform = 'rotate(0deg)';
      }
    }

    private handleViewModeChange(viewMode: 'grid' | 'list'): void {
      this.currentViewMode = viewMode;
      
      // Update button states
      const viewButtons = document.querySelectorAll('.view-mode-btn');
      viewButtons.forEach(btn => {
        const button = btn as HTMLButtonElement;
        if ((viewMode === 'grid' && button.id === 'view-grid') || 
            (viewMode === 'list' && button.id === 'view-list')) {
          button.classList.add('active', 'bg-white', 'dark:bg-gray-800', 'text-primary-600', 'dark:text-primary-400', 'shadow-sm');
          button.classList.remove('text-gray-500', 'dark:text-gray-400');
        } else {
          button.classList.remove('active', 'bg-white', 'dark:bg-gray-800', 'text-primary-600', 'dark:text-primary-400', 'shadow-sm');
          button.classList.add('text-gray-500', 'dark:text-gray-400');
        }
      });
      
      // Re-render countries with new view mode
      this.renderCountries();
    }

    private async loadAllCountries(): Promise<void> {
      console.log('loadAllCountries called');
      if (this.isLoading) {
        console.log('Already loading, skipping');
        return;
      }

      console.log('Starting to load all countries');
      this.showLoadingState();
      this.isLoading = true;

      try {
        console.log('Fetching countries from API...');
        this.allCountries = await fetchAllCountries();
        console.log('Fetched', this.allCountries.length, 'countries');
        
        this.filteredCountries = [...this.allCountries];
        console.log('Set filtered countries:', this.filteredCountries.length);
        
        // Check if using fallback data
        if (this.allCountries.length === 8) {
          console.log('Using fallback data, showing banner');
          this.showApiFallbackBanner();
        }
        
        this.hideWelcomeMessage();
        console.log('About to render countries');
        this.renderCountries();
        this.updateResultsCount();
        this.hideLoadingState();
        this.showResults();
        
        console.log('Countries loaded and displayed successfully');
      } catch (error) {
        console.error('Failed to load countries:', error);
        this.showErrorState(error instanceof Error ? error.message : 'Failed to load countries');
      } finally {
        this.isLoading = false;
      }
    }

    private async handleSearch(query: string, searchType: string = 'name'): Promise<void> {
      console.log('handleSearch called with:', { query, searchType });
      this.currentFilters.search = query;

      if (!query.trim()) {
        // If search is empty, show all countries or current filtered results
        if (this.allCountries.length === 0) {
          console.log('Loading all countries for empty search');
          await this.loadAllCountries();
        } else {
          console.log('Applying filters for empty search');
          this.applyFilters();
        }
        return;
      }

      // Show loading state
      console.log('Setting loading state for search');
      this.setLoading(true);

      try {
        // If using advanced search types, fetch specific data
        if (searchType !== 'name') {
          console.log('Using advanced search for type:', searchType);
          await this.handleAdvancedSearch(query, searchType);
        } else {
          // Default name search
          console.log('Using default name search');
          if (this.allCountries.length === 0) {
            console.log('Loading all countries first');
            await this.loadAllCountries();
          }
          this.applyFilters();
        }
      } catch (error) {
        console.error('Search error:', error);
        this.showErrorState('Search failed. Please try again.');
      } finally {
        this.setLoading(false);
      }
    }

    private async handleAdvancedSearch(query: string, searchType: string): Promise<void> {
      try {
        let searchResults: Country[] = [];

        switch (searchType) {
          case 'capital':
            searchResults = await fetchCountriesByCapital(query);
            break;
          case 'currency':
            searchResults = await fetchCountriesByCurrency(query);
            break;
          case 'language':
            searchResults = await fetchCountriesByLanguage(query);
            break;
          case 'demonym':
            searchResults = await fetchCountriesByDemonym(query);
            break;
          default:
            // Fallback to regular name search
            if (this.allCountries.length === 0) {
              await this.loadAllCountries();
            }
            this.applyFilters();
            return;
        }

        // Update filtered countries with search results
        this.filteredCountries = searchResults.sort((a, b) => a.name.common.localeCompare(b.name.common));
        this.hideWelcomeMessage();
        this.renderCountries();
        this.updateResultsCount();
        this.showResults();

      } catch (error) {
        console.error(`Advanced search (${searchType}) failed:`, error);
        this.showErrorState(`No results found for "${query}" in ${searchType}.`);
      }
    }

    private applyFilters(): void {
      let filtered = [...this.allCountries];

      // Apply search filter
      if (this.currentFilters.search) {
        const searchTerm = this.currentFilters.search.toLowerCase();
        filtered = filtered.filter(country => 
          country.name.common.toLowerCase().includes(searchTerm) ||
          country.name.official.toLowerCase().includes(searchTerm) ||
          (country.capital && country.capital.some(cap => 
            cap.toLowerCase().includes(searchTerm)
          )) ||
          (country.region && country.region.toLowerCase().includes(searchTerm)) ||
          (country.subregion && country.subregion.toLowerCase().includes(searchTerm))
        );
      }

      // Apply region filter
      if (this.currentFilters.region) {
        filtered = filtered.filter(country => 
          country.region === this.currentFilters.region
        );
      }

      // Apply sorting
      filtered.sort((a, b) => {
        let comparison = 0;
        
        switch (this.currentFilters.sortBy) {
          case 'name':
            comparison = a.name.common.localeCompare(b.name.common);
            break;
          case 'population':
            comparison = a.population - b.population;
            break;
          case 'area':
            comparison = a.area - b.area;
            break;
        }

        return this.currentFilters.sortOrder === 'desc' ? -comparison : comparison;
      });

      this.filteredCountries = filtered;
      this.hideWelcomeMessage();
      this.renderCountries();
      this.updateResultsCount();
      this.showResults();
    }

    private renderCountries(): void {
      console.log('renderCountries called with', this.filteredCountries.length, 'countries');
      
      const container = document.getElementById('countries-container');
      const grid = document.getElementById('countries-grid');
      
      if (!container || !grid) {
        console.error('Countries container or grid not found');
        return;
      }

      // Update view mode classes
      const isGridView = this.currentViewMode === 'grid';
      grid.className = `transition-all duration-300 ${
        isGridView 
          ? 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6' 
          : 'space-y-4'
      }`;

      // Clear existing content
      grid.innerHTML = '';
      
      if (this.filteredCountries.length === 0) {
        console.log('No countries to display, showing no results state');
        this.showNoResultsState();
        return;
      }

      console.log('Rendering', this.filteredCountries.length, 'countries');

      // Add countries
      this.filteredCountries.forEach((country, index) => {
        const countryElement = this.createCountryCard(country, this.currentViewMode);
        countryElement.style.opacity = '0';
        countryElement.style.transform = 'translateY(20px)';
        grid.appendChild(countryElement);

        // Animate in
        setTimeout(() => {
          countryElement.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
          countryElement.style.opacity = '1';
          countryElement.style.transform = 'translateY(0)';
        }, index * 50);
      });
    }

    private createCountryCard(country: Country, viewMode: 'grid' | 'list'): HTMLElement {
      const card = document.createElement('div');
      
      card.className = `country-card bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 cursor-pointer group border border-gray-200 dark:border-gray-700 hover:border-primary-500 dark:hover:border-primary-400 ${
        viewMode === 'list' 
          ? 'flex items-center p-4 space-x-4' 
          : 'overflow-hidden'
      }`;
      
      card.setAttribute('data-country-code', country.cca3);
      card.setAttribute('data-country-name', country.name.common);

      card.innerHTML = this.getCardHTML(country, viewMode);

      // Add click event for modal
      card.addEventListener('click', (e) => {
        if (!(e.target as Element).closest('.favorite-btn')) {
          const event = new CustomEvent('country-selected', {
            detail: { countryCode: country.cca3, countryName: country.name.common }
          });
          document.dispatchEvent(event);
        }
      });

      return card;
    }

    private getCardHTML(country: Country, viewMode: 'grid' | 'list'): string {
      const formatNumber = (num: number): string => num.toLocaleString();
      
      const getPrimaryLanguage = (languages?: { [key: string]: string }): string => {
        if (!languages) return 'N/A';
        const langKeys = Object.keys(languages);
        return langKeys.length > 0 ? languages[langKeys[0]] : 'N/A';
      };

      const getPrimaryCurrency = (currencies?: { [key: string]: { name: string; symbol: string } }): string => {
        if (!currencies) return 'N/A';
        const currencyKeys = Object.keys(currencies);
        if (currencyKeys.length > 0) {
          const currency = currencies[currencyKeys[0]];
          return `${currency.name} (${currency.symbol})`;
        }
        return 'N/A';
      };

      return `
        <div class="${viewMode === 'list' ? 'w-16 h-12' : 'w-full h-48'} flex-shrink-0 overflow-hidden ${viewMode === 'grid' ? 'rounded-t-lg' : 'rounded-lg'}">
          <img
            src="${country.flags.svg || country.flags.png}"
            alt="${country.flags.alt || `Flag of ${country.name.common}`}"
            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ${viewMode === 'list' ? 'rounded-lg' : ''}"
            loading="lazy"
          />
        </div>

        <div class="${viewMode === 'grid' ? 'p-6' : 'flex-1 min-w-0'}">
          <div class="mb-4">
            <h3 class="text-lg font-bold text-gray-900 dark:text-white group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors duration-300">
              ${country.name.common}
            </h3>
            ${viewMode === 'grid' ? `
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                ${country.name.official}
              </p>
            ` : ''}
          </div>

          <div class="space-y-2 text-sm ${viewMode === 'list' ? 'grid grid-cols-2 md:grid-cols-4 gap-4 space-y-0' : ''}">
            <div class="flex items-center text-gray-700 dark:text-gray-300">
              <span class="font-medium mr-2">Capital:</span>
              <span>${country.capital ? country.capital.join(', ') : 'N/A'}</span>
            </div>
            <div class="flex items-center text-gray-700 dark:text-gray-300">
              <span class="font-medium mr-2">Region:</span>
              <span>${country.region}</span>
            </div>
            <div class="flex items-center text-gray-700 dark:text-gray-300">
              <span class="font-medium mr-2">Population:</span>
              <span>${formatNumber(country.population)}</span>
            </div>
            ${viewMode === 'grid' ? `
              <div class="flex items-center text-gray-700 dark:text-gray-300">
                <span class="font-medium mr-2">Language:</span>
                <span>${getPrimaryLanguage(country.languages)}</span>
              </div>
              <div class="flex items-center text-gray-700 dark:text-gray-300">
                <span class="font-medium mr-2">Currency:</span>
                <span class="truncate">${getPrimaryCurrency(country.currencies)}</span>
              </div>
            ` : ''}
          </div>

          <div class="flex justify-between items-center mt-4">
            <button
              class="favorite-btn p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200 text-gray-500 dark:text-gray-400 hover:text-red-500 dark:hover:text-red-400"
              data-country-code="${country.cca3}"
            >
              <svg class="w-5 h-5 favorite-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
              </svg>
            </button>
            ${viewMode === 'grid' ? `
              <span class="text-xs text-gray-500 dark:text-gray-400">
                Click for details
              </span>
            ` : ''}
          </div>
        </div>
      `;
    }

    private setLoading(loading: boolean): void {
      this.isLoading = loading;
      if (loading) {
        this.showLoadingState();
      } else {
        this.hideLoadingState();
      }
    }

    private showLoadingState(): void {
      this.hideAllStates();
      const loading = document.getElementById('loading-state');
      loading?.classList.remove('hidden');
    }

    private hideLoadingState(): void {
      const loading = document.getElementById('loading-state');
      loading?.classList.add('hidden');
    }

    private showErrorState(message: string): void {
      this.hideAllStates();
      const error = document.getElementById('error-state');
      const errorMessage = document.getElementById('error-message');
      if (error && errorMessage) {
        error.classList.remove('hidden');
        errorMessage.textContent = message;
      }
    }

    private showResults(): void {
      const container = document.getElementById('countries-container');
      const resultsInfo = document.getElementById('results-info');
      container?.classList.remove('hidden');
      resultsInfo?.classList.remove('hidden');
    }

    private hideWelcomeMessage(): void {
      const welcome = document.getElementById('welcome-message');
      welcome?.classList.add('hidden');
    }

    private showApiFallbackBanner(): void {
      const banner = document.getElementById('api-status-banner');
      const indicator = document.getElementById('sample-data-indicator');
      banner?.classList.remove('hidden');
      indicator?.classList.remove('hidden');
    }

    private showNoResultsState(): void {
      const grid = document.getElementById('countries-grid');
      if (grid) {
        grid.innerHTML = `
          <div class="col-span-full text-center py-20">
            <div class="mx-auto w-24 h-24 text-gray-400 dark:text-gray-500 mb-4">
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No countries found</h3>
            <p class="text-gray-500 dark:text-gray-400">Try adjusting your search criteria or filters.</p>
          </div>
        `;
      }
    }

    private hideAllStates(): void {
      const states = ['welcome-message', 'loading-state', 'error-state'];
      states.forEach(stateId => {
        const element = document.getElementById(stateId);
        element?.classList.add('hidden');
      });
    }

    private updateResultsCount(): void {
      const resultsCount = document.getElementById('results-count');
      if (resultsCount) {
        resultsCount.textContent = this.filteredCountries.length.toString();
      }
    }

    // Quiz-related properties
    private quizCountries: Country[] = [];
    private currentQuizQuestion: number = 0;
    private quizScore: number = 0;
    private quizType: 'flags' | 'capitals' = 'flags';
    private totalQuizQuestions: number = 10;

    private openQuiz(): void {
      const quizModal = document.getElementById('quiz-modal');
      const quizStart = document.getElementById('quiz-start');
      const quizGame = document.getElementById('quiz-game');
      const quizResults = document.getElementById('quiz-results');

      if (quizModal && quizStart && quizGame && quizResults) {
        // Show modal and start screen
        quizModal.classList.remove('hidden');
        quizStart.classList.remove('hidden');
        quizGame.classList.add('hidden');
        quizResults.classList.add('hidden');

        // Reset quiz state
        this.currentQuizQuestion = 0;
        this.quizScore = 0;
      }
    }

    private closeQuiz(): void {
      const quizModal = document.getElementById('quiz-modal');
      quizModal?.classList.add('hidden');
    }

    private async startQuiz(type: 'flags' | 'capitals'): void {
      this.quizType = type;

      // Load countries if not already loaded
      if (this.allCountries.length === 0) {
        await this.loadAllCountries();
      }

      // Filter countries with required data
      if (type === 'flags') {
        this.quizCountries = this.allCountries.filter(country => 
          country.flags?.png && country.name?.common
        ).slice(0, 50); // Limit to 50 countries for better performance
      } else {
        this.quizCountries = this.allCountries.filter(country => 
          country.capital && country.capital.length > 0 && country.name?.common
        ).slice(0, 50);
      }

      // Shuffle countries
      this.quizCountries = this.shuffleArray([...this.quizCountries]);

      // Show game screen
      const quizStart = document.getElementById('quiz-start');
      const quizGame = document.getElementById('quiz-game');
      
      quizStart?.classList.add('hidden');
      quizGame?.classList.remove('hidden');

      // Start first question
      this.showQuizQuestion();
    }

    private shuffleArray<T>(array: T[]): T[] {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }

    private showQuizQuestion(): void {
      if (this.currentQuizQuestion >= this.totalQuizQuestions) {
        this.showQuizResults();
        return;
      }

      const currentCountry = this.quizCountries[this.currentQuizQuestion];
      const questionNumber = document.getElementById('quiz-question-number');
      const progressBar = document.getElementById('quiz-progress');
      const questionContainer = document.getElementById('quiz-question');
      const optionsContainer = document.getElementById('quiz-options');

      if (!questionNumber || !progressBar || !questionContainer || !optionsContainer) return;

      // Update progress
      questionNumber.textContent = `${this.currentQuizQuestion + 1}`;
      const progressPercent = ((this.currentQuizQuestion) / this.totalQuizQuestions) * 100;
      progressBar.style.width = `${progressPercent}%`;

      // Generate wrong options
      const wrongOptions = this.generateWrongOptions(currentCountry);
      const allOptions = this.shuffleArray([currentCountry, ...wrongOptions]);

      // Show question based on type
      if (this.quizType === 'flags') {
        questionContainer.innerHTML = `
          <div class="text-center">
            <img src="${currentCountry.flags?.png}" alt="Flag" class="w-32 h-20 object-cover mx-auto rounded-lg shadow-md border border-gray-200 dark:border-gray-600 mb-4">
            <p class="text-lg font-medium text-gray-900 dark:text-white">Which country does this flag belong to?</p>
          </div>
        `;
        
        optionsContainer.innerHTML = allOptions.map(country => `
          <button 
            class="quiz-option w-full text-left px-4 py-3 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-200 text-gray-900 dark:text-white"
            data-country="${country.name?.common}"
          >
            ${country.name?.common}
          </button>
        `).join('');
      } else {
        questionContainer.innerHTML = `
          <div class="text-center">
            <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">${currentCountry.name?.common}</h3>
            <p class="text-lg font-medium text-gray-900 dark:text-white">What is the capital of this country?</p>
          </div>
        `;
        
        optionsContainer.innerHTML = allOptions.map(country => `
          <button 
            class="quiz-option w-full text-left px-4 py-3 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-200 text-gray-900 dark:text-white"
            data-country="${country.name?.common}"
          >
            ${country.capital?.[0] || 'N/A'}
          </button>
        `).join('');
      }

      // Add event listeners to options
      const optionButtons = optionsContainer.querySelectorAll('.quiz-option');
      optionButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const selectedCountry = (e.target as HTMLButtonElement).dataset.country;
          this.handleQuizAnswer(selectedCountry === currentCountry.name?.common, e.target as HTMLButtonElement);
        });
      });
    }

    private generateWrongOptions(correctCountry: Country): Country[] {
      const availableCountries = this.quizCountries.filter(country => 
        country.name?.common !== correctCountry.name?.common
      );
      
      const wrongOptions: Country[] = [];
      const usedIndexes = new Set<number>();

      while (wrongOptions.length < 3 && usedIndexes.size < availableCountries.length) {
        const randomIndex = Math.floor(Math.random() * availableCountries.length);
        if (!usedIndexes.has(randomIndex)) {
          wrongOptions.push(availableCountries[randomIndex]);
          usedIndexes.add(randomIndex);
        }
      }

      return wrongOptions;
    }

    private handleQuizAnswer(isCorrect: boolean, selectedButton: HTMLButtonElement): void {
      // Disable all option buttons
      const optionButtons = document.querySelectorAll('.quiz-option');
      optionButtons.forEach(button => {
        button.setAttribute('disabled', 'true');
      });

      // Show correct/incorrect styling
      if (isCorrect) {
        selectedButton.classList.add('bg-green-100', 'dark:bg-green-800', 'border-green-300', 'dark:border-green-600', 'text-green-800', 'dark:text-green-200');
        this.quizScore++;
      } else {
        selectedButton.classList.add('bg-red-100', 'dark:bg-red-800', 'border-red-300', 'dark:border-red-600', 'text-red-800', 'dark:text-red-200');
        
        // Highlight correct answer
        const currentCountry = this.quizCountries[this.currentQuizQuestion];
        optionButtons.forEach(button => {
          if (button.dataset.country === currentCountry.name?.common) {
            button.classList.add('bg-green-100', 'dark:bg-green-800', 'border-green-300', 'dark:border-green-600', 'text-green-800', 'dark:text-green-200');
          }
        });
      }

      // Move to next question after delay
      setTimeout(() => {
        this.currentQuizQuestion++;
        this.showQuizQuestion();
      }, 1500);
    }

    private showQuizResults(): void {
      const quizGame = document.getElementById('quiz-game');
      const quizResults = document.getElementById('quiz-results');
      const finalScore = document.getElementById('quiz-final-score');
      const scorePercentage = document.getElementById('quiz-score-percentage');
      const scoreMessage = document.getElementById('quiz-score-message');

      if (!quizGame || !quizResults || !finalScore || !scorePercentage || !scoreMessage) return;

      quizGame.classList.add('hidden');
      quizResults.classList.remove('hidden');

      // Calculate percentage
      const percentage = Math.round((this.quizScore / this.totalQuizQuestions) * 100);

      // Update results
      finalScore.textContent = `${this.quizScore}/${this.totalQuizQuestions}`;
      scorePercentage.textContent = `${percentage}%`;

      // Set message based on performance
      let message = '';
      if (percentage >= 90) {
        message = 'Outstanding! You\'re a geography expert! 🌟';
      } else if (percentage >= 70) {
        message = 'Great job! You know your countries well! 🎉';
      } else if (percentage >= 50) {
        message = 'Good effort! Keep exploring to learn more! 👍';
      } else {
        message = 'Keep practicing! Geography is fascinating! 📚';
      }

      scoreMessage.textContent = message;
    }

    private resetQuiz(): void {
      this.currentQuizQuestion = 0;
      this.quizScore = 0;
      
      const quizResults = document.getElementById('quiz-results');
      const quizStart = document.getElementById('quiz-start');
      
      quizResults?.classList.add('hidden');
      quizStart?.classList.remove('hidden');
    }
  }

  // Initialize app when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CountryExplorer();
    
    // Initialize Lucide icons
    if (typeof lucide !== 'undefined') {
      lucide.createIcons();
    }
  });
</script>
